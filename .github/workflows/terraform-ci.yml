name: Terraform CI #テスト

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches: [main]
    paths:
      - "**.tf"
      - "**.tftest.hcl"
      - ".github/workflows/*.yml"
      - ".playbook/deploy.yml"

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-check:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    defaults:
      run:
        working-directory: aws-study-tf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Restore tfvars from base64 secret
        run: |
          echo "${{ secrets.TFVARS_B64 }}" | base64 -d > terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Test
        run: terraform test

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: comment
        uses: actions/github-script@v4
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"

        with:
          script: |

            const output = `### terraform cicd
             #### Terraform Plan \`${{ steps.plan.outcome }}\`

             <details><summary>Show Plan</summary>

             \`\`\`${process.env.PLAN}\`\`\`

             </details>`;

             github.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: output
             })

  ansible-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: AWS認証情報の設定
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: セキュリティグループの更新
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id=sg-033646bf4202529c6 \
          --protocol=tcp \
          --port=22 \
          --cidr=${{ steps.ip.outputs.ipv4 }}/32 # github global ip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-18-182-54-68.ap-northeast-1.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Syntax check
        run: |
          ansible-playbook -i inventory/production.yml playbook/deploy.yml --syntax-check

      - name: Dry run
        run: |
          ansible-playbook -i inventory/production.yml playbook/deploy.yml --check -v

      - name: セキュリティグループのルール削除
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id=sg-033646bf4202529c6 \
          --protocol=tcp \
          --port=22 \
          --cidr=${{ steps.ip.outputs.ipv4 }}/32
